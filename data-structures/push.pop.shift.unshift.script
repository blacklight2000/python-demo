# Using subclassing to extend the capabilities of the list class to incorporate the standard
pop, push, shift, unshift dynamic data structures

# not worth implementing

# push

In [11]: a0 = [1,2,3]

In [12]: class A(list):
    def push(self,n):
        super(A,self).append(n)
   ....:         

In [13]: a = A(a0)

In [14]: a
Out[14]: [1, 2, 3]

In [15]: a.p
a.pop   a.push  

In [15]: a.push(4)

In [16]: a
Out[16]: [1, 2, 3, 4]
----------------------------
#pop

In [17]: a.pop()
Out[17]: 4

In [18]: a
Out[18]: [1, 2, 3]
----------------------------
#shift

In [1]: a0 = [1,2,3]

In [2]: a0.sort
Out[2]: <function sort>

In [3]: class A(list):
   ...:     def shift(self):
   ...:         super(A,self).pop(0)
   ...:         

In [4]: a = A(a0)

In [5]: a.s
a.shift  a.sort   

In [5]: a
Out[5]: [1, 2, 3]

In [6]: a.shift()

In [7]: a
Out[7]: [2, 3]

--------------------------------------------` 
# unshift

In [1]: a0 = [1,2,3]

In [2]: class A(list):
   ...:     def unshift(self,n):
   ...:         super(A,self).insert(0,n)
   ...:         

In [3]: a = A(a0)

In [4]: a
Out[4]: [1, 2, 3]

In [5]: a.unshift(4)

In [6]: a
Out[6]: [4, 1, 2, 3]

